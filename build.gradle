buildscript {
    ext {
        springBootVersion = '1.5.10.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.4.RELEASE"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'cities-service'
}

repositories {
    mavenCentral()
}

allprojects { 
	if (project.hasProperty('buildversion')) { 
		project.version = project.buildversion 
	} else { 
		project.version = '1.0'
	} 
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.springframework.boot:spring-boot-starter-data-rest")
	compile 'org.springframework.cloud:spring-cloud-spring-service-connector'
	compile 'org.springframework.cloud:spring-cloud-cloudfoundry-connector'
	//runtime("org.hsqldb:hsqldb")
	//runtime('com.h2database:h2')
	runtime("mysql:mysql-connector-java")
	runtime("org.flywaydb:flyway-core")
    testCompile('org.springframework.boot:spring-boot-starter-test') 
}

bootRun {
    systemProperties System.properties
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.5.1'
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardError"
        //events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}
